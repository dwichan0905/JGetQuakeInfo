/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Forms;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import Modules.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.Properties;

/**
 *
 * @author Dwi Candra Permana
 */
public class frmMain extends javax.swing.JFrame {
private frmInfo frmInfo;
private frmAbout frmAbout;
private frmConfig frmConfig;
private frmLastInfo frmLastInfo;
private frmBar frmBar;
private TakeXML TakeXML;
private PlayMedia PlayMedia;
private frmDebug frmDebug;
private sysTray sysTray;
    /**
     * Creates new form frmMain
     */
    public frmMain() {
        frmInfo = new frmInfo();
        frmAbout = new frmAbout();
        frmConfig = new frmConfig();
        frmLastInfo = new frmLastInfo();
        frmBar = new frmBar();
        frmDebug = new frmDebug();
        TakeXML = new TakeXML();
        PlayMedia = new PlayMedia();
        sysTray = new sysTray();
        ImageIcon img = new ImageIcon("src/Resources/iconTray/main.png");
        initComponents();
        this.setIconImage(img.getImage());
        lbPref.setVisible(false);
        lbRefresh.setVisible(false);
        lbLastInfo.setVisible(false);
        lbContact.setVisible(false);
        lbTentang.setVisible(false);
        // jMenu4.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Pop = new javax.swing.JPopupMenu();
        jdl = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        gmp = new javax.swing.JMenu();
        ckinfo = new javax.swing.JMenuItem();
        seeinfo = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        prf = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        bnt = new javax.swing.JMenu();
        cont = new javax.swing.JMenuItem();
        ab = new javax.swing.JMenuItem();
        kel = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        ttp = new javax.swing.JMenuItem();
        lbTentang = new javax.swing.JLabel();
        lbRefresh = new javax.swing.JLabel();
        lbLastInfo = new javax.swing.JLabel();
        lbContact = new javax.swing.JLabel();
        lbPref = new javax.swing.JLabel();
        btnPref = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnLastInfo = new javax.swing.JButton();
        btnTentang = new javax.swing.JButton();
        btnContact = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lbStatus = new javax.swing.JLabel();
        lbStatus2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        Pop.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Pop.setLabel("");
        Pop.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                PopFocusLost(evt);
            }
        });
        Pop.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
                PopPopupMenuCanceled(evt);
            }
        });
        Pop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                PopMouseExited(evt);
            }
        });

        jdl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/iconTray/main.png"))); // NOI18N
        jdl.setText("JGetQuakeInfo ver. 1.1-alpha");
        jdl.setEnabled(false);
        Pop.add(jdl);
        Pop.add(jSeparator1);

        gmp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/icon/Earthquakes_16px.png"))); // NOI18N
        gmp.setText("Gempa");

        ckinfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/icon/Refresh_16px.png"))); // NOI18N
        ckinfo.setText("Cek informasi gempa terbaru...");
        ckinfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckinfoActionPerformed(evt);
            }
        });
        gmp.add(ckinfo);

        seeinfo.setText("Lihat informasi terakhir");
        seeinfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seeinfoActionPerformed(evt);
            }
        });
        gmp.add(seeinfo);

        Pop.add(gmp);
        Pop.add(jSeparator4);

        prf.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        prf.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/icon/Settings_16px.png"))); // NOI18N
        prf.setText("Preferensi");
        prf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prfActionPerformed(evt);
            }
        });
        Pop.add(prf);
        Pop.add(jSeparator3);

        bnt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/icon/Help_16px.png"))); // NOI18N
        bnt.setText("Bantuan");

        cont.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/icon/Phone_16px.png"))); // NOI18N
        cont.setText("Kontak Saya");
        cont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contActionPerformed(evt);
            }
        });
        bnt.add(cont);

        ab.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/icon/About_16px.png"))); // NOI18N
        ab.setText("Tentang");
        ab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abActionPerformed(evt);
            }
        });
        bnt.add(ab);

        Pop.add(bnt);

        kel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/icon/Exit_16px.png"))); // NOI18N
        kel.setText("Keluar");
        kel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kelActionPerformed(evt);
            }
        });
        Pop.add(kel);
        Pop.add(jSeparator2);

        ttp.setText("Tutup");
        Pop.add(ttp);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("JGetQuakeInfo Ver. 1.1-alpha [Jun 2017]");
        setMaximumSize(new java.awt.Dimension(525, 204));
        setMinimumSize(new java.awt.Dimension(525, 204));
        setPreferredSize(new java.awt.Dimension(525, 204));
        setResizable(false);
        setSize(new java.awt.Dimension(525, 204));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        lbTentang.setBackground(new java.awt.Color(0, 0, 0));
        lbTentang.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbTentang.setForeground(new java.awt.Color(255, 255, 255));
        lbTentang.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbTentang.setText("TENTANG");
        lbTentang.setOpaque(true);
        getContentPane().add(lbTentang);
        lbTentang.setBounds(420, 100, 80, 17);

        lbRefresh.setBackground(new java.awt.Color(0, 0, 0));
        lbRefresh.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbRefresh.setForeground(new java.awt.Color(255, 255, 255));
        lbRefresh.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbRefresh.setText("PERBARUI INFO");
        lbRefresh.setOpaque(true);
        getContentPane().add(lbRefresh);
        lbRefresh.setBounds(90, 100, 130, 17);

        lbLastInfo.setBackground(new java.awt.Color(0, 0, 0));
        lbLastInfo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbLastInfo.setForeground(new java.awt.Color(255, 255, 255));
        lbLastInfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbLastInfo.setText("GEMPA TERAKHIR");
        lbLastInfo.setOpaque(true);
        getContentPane().add(lbLastInfo);
        lbLastInfo.setBounds(190, 100, 142, 17);

        lbContact.setBackground(new java.awt.Color(0, 0, 0));
        lbContact.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbContact.setForeground(new java.awt.Color(255, 255, 255));
        lbContact.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbContact.setText("KONTAK SAYA");
        lbContact.setOpaque(true);
        getContentPane().add(lbContact);
        lbContact.setBounds(310, 100, 115, 17);

        lbPref.setBackground(new java.awt.Color(0, 0, 0));
        lbPref.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbPref.setForeground(new java.awt.Color(255, 255, 255));
        lbPref.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbPref.setText("PREFERENSI");
        lbPref.setOpaque(true);
        getContentPane().add(lbPref);
        lbPref.setBounds(10, 100, 106, 17);

        btnPref.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Settings_Gray_84.png"))); // NOI18N
        btnPref.setBorderPainted(false);
        btnPref.setContentAreaFilled(false);
        btnPref.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPref.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnPrefMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnPrefMouseEntered(evt);
            }
        });
        btnPref.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrefActionPerformed(evt);
            }
        });
        getContentPane().add(btnPref);
        btnPref.setBounds(20, 10, 80, 80);

        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Refresh_Gray_84px.png"))); // NOI18N
        btnRefresh.setBorderPainted(false);
        btnRefresh.setContentAreaFilled(false);
        btnRefresh.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnRefreshMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnRefreshMouseExited(evt);
            }
        });
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        getContentPane().add(btnRefresh);
        btnRefresh.setBounds(120, 10, 80, 80);

        btnLastInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Info_Gray_84.png"))); // NOI18N
        btnLastInfo.setBorderPainted(false);
        btnLastInfo.setContentAreaFilled(false);
        btnLastInfo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLastInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnLastInfoMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnLastInfoMouseExited(evt);
            }
        });
        btnLastInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastInfoActionPerformed(evt);
            }
        });
        getContentPane().add(btnLastInfo);
        btnLastInfo.setBounds(220, 10, 80, 80);

        btnTentang.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/About_Gray_84.png"))); // NOI18N
        btnTentang.setBorderPainted(false);
        btnTentang.setContentAreaFilled(false);
        btnTentang.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTentang.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnTentangMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnTentangMouseExited(evt);
            }
        });
        btnTentang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTentangActionPerformed(evt);
            }
        });
        getContentPane().add(btnTentang);
        btnTentang.setBounds(420, 10, 80, 80);

        btnContact.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Phone_Gray_84.png"))); // NOI18N
        btnContact.setBorderPainted(false);
        btnContact.setContentAreaFilled(false);
        btnContact.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnContact.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnContactMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnContactMouseEntered(evt);
            }
        });
        btnContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnContactActionPerformed(evt);
            }
        });
        getContentPane().add(btnContact);
        btnContact.setBounds(320, 10, 80, 80);

        jLabel1.setFont(new java.awt.Font("Bleeding Cowboys", 0, 36)); // NOI18N
        jLabel1.setText("JGetQuakeInfo");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(270, 110, 240, 43);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Version 1.1-alpha");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(340, 150, 170, 15);

        lbStatus.setText("Status: This OS isn't support the system tray icon.");
        getContentPane().add(lbStatus);
        lbStatus.setBounds(10, 150, 410, 15);
        getContentPane().add(lbStatus2);
        lbStatus2.setBounds(10, 130, 250, 20);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/bg.jpg"))); // NOI18N
        getContentPane().add(jLabel3);
        jLabel3.setBounds(0, -50, 720, 270);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnPrefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrefActionPerformed
        // TODO add your handling code here:
        if (frmConfig.isVisible() == false) {
            frmConfig.setVisible(true);
        } else {
            frmConfig.requestFocus();
        }
    }//GEN-LAST:event_btnPrefActionPerformed

    private void btnPrefMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPrefMouseEntered
        // TODO add your handling code here:
        ImageIcon i = new ImageIcon(getClass().getResource("/Resources/Settings_84px.png"));
        btnPref.setIcon(i);
        lbPref.setVisible(true);
    }//GEN-LAST:event_btnPrefMouseEntered

    private void btnPrefMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPrefMouseExited
        // TODO add your handling code here:
        ImageIcon i = new ImageIcon(getClass().getResource("/Resources/Settings_Gray_84.png"));
        btnPref.setIcon(i);
        lbPref.setVisible(false);
    }//GEN-LAST:event_btnPrefMouseExited

    private void btnRefreshMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRefreshMouseEntered
        // TODO add your handling code here:
        ImageIcon i = new ImageIcon(getClass().getResource("/Resources/Refresh_84px.png"));
        btnRefresh.setIcon(i);
        lbRefresh.setVisible(true);
    }//GEN-LAST:event_btnRefreshMouseEntered

    private void btnRefreshMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRefreshMouseExited
        // TODO add your handling code here:
        ImageIcon i = new ImageIcon(getClass().getResource("/Resources/Refresh_Gray_84px.png"));
        btnRefresh.setIcon(i);
        lbRefresh.setVisible(false);
    }//GEN-LAST:event_btnRefreshMouseExited

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        lbStatus2.setText("Please wait...");
        try {
            // TODO add your handling code here:
            File f = new File("src/Prefer/JGQI_Config.properties");
            FileReader in = new FileReader(f);
            Properties prop = new Properties();
            prop.load(in);
            
            // Writes configuration data into data type
            String getInfo = prop.getProperty("info");
            String waveSt = prop.getProperty("warn");
            boolean waveStatus = Boolean.parseBoolean(waveSt);
            String wave_mag = prop.getProperty("warn_mag");
            double waveMag = Double.parseDouble(wave_mag);
            String wavePath = prop.getProperty("warn_path");
            
            System.out.println(getInfo + " || " + waveStatus + " || " + waveMag + " || " + wavePath);
            // Verification while reading XML data
            if (getInfo.equals("BMKG")) {
                boolean takeXML = TakeXML.DapatkanXML_BMKG(wavePath, waveMag);
                if (takeXML == true) {
                    // When the data is new
                    lbStatus2.setText("BMKG: New Data Received!");
                    Thread.sleep(180);
                    lbStatus2.setText(null);
                } else {
                    // When the data is not found or old data is given
                    frmBar.dispose();
                    lbStatus2.setText(null);
                    int t = JOptionPane.showConfirmDialog(this, "Informasi Gempa Terbaru dari BMKG tidak ditemukan. Apakah Anda ingin melihat informasi yang terakhir didapat?", "Not Found", JOptionPane.YES_NO_OPTION);
                    if (t == JOptionPane.YES_OPTION) {
                        takeXML = TakeXML.DapatkanXMLPaksa_BMKG(wavePath, waveMag);
                        if (takeXML == true) {
                            // When the data is new
                            lbStatus2.setText("BMKG: Recent Data Received!");
                            Thread.sleep(180);
                            lbStatus2.setText(null);
                        } else {
                            // When the data is not found or old data is given
                            lbStatus2.setText(null);
                            JOptionPane.showMessageDialog(this, "Gagal mendapatkan informasi terakhir dari BMKG!", "Not Found", JOptionPane.WARNING_MESSAGE);
                        }
                    }
                }
            } else if (getInfo.equals("USGS")) {
                boolean takeXML = TakeXML.DapatkanXML_USGS(wavePath, waveMag);
                if (takeXML == true) {
                    // When the data is new
                    lbStatus2.setText("USGS: New Data Received!");
                    Thread.sleep(180);
                    lbStatus2.setText(null);
                } else {
                    // When the data is not found or old data is given
                    frmBar.dispose();
                    lbStatus2.setText(null);
                    int t = JOptionPane.showConfirmDialog(this, "Informasi Gempa Terbaru dari USGS tidak ditemukan. Apakah Anda ingin melihat informasi yang terakhir didapat?", "Not Found", JOptionPane.YES_NO_OPTION);
                    if (t == JOptionPane.YES_OPTION) {
                        if (frmLastInfo.isVisible() == false) {
                            frmLastInfo.setVisible(true);
                        } else {
                            frmLastInfo.requestFocus();
                        }
                    }
                }
            } /*else {
                JOptionPane.showMessageDialog(this, "Ada masalah pada data preferensi Anda. Cek kembali preferensinya, atau kembalikan semuanya ke default!", "Oops! Null Configuration", JOptionPane.ERROR_MESSAGE);
            }*/
            in.close();
        } catch (Exception ex) {
                    String errTit = ex.getMessage();
                    JOptionPane.showMessageDialog(this, ex.getStackTrace(), errTit, JOptionPane.ERROR_MESSAGE);
                    CharArrayWriter cw = new CharArrayWriter();
                    PrintWriter w = new PrintWriter(cw);
                    ex.printStackTrace(w);
                    w.close();
                    String trace = cw.toString();
                    
                    frmDebug.setVisible(true);
                    frmDebug.log.setText(trace + "\n" + String.valueOf(System.getProperties()));
                    Logger.getLogger(frmConfig.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnLastInfoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLastInfoMouseEntered
        // TODO add your handling code here:
        ImageIcon i = new ImageIcon(getClass().getResource("/Resources/Info_84px.png"));
        btnLastInfo.setIcon(i);
        lbLastInfo.setVisible(true);
    }//GEN-LAST:event_btnLastInfoMouseEntered

    private void btnLastInfoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLastInfoMouseExited
        // TODO add your handling code here:
        ImageIcon i = new ImageIcon(getClass().getResource("/Resources/Info_Gray_84.png"));
        btnLastInfo.setIcon(i);
        lbLastInfo.setVisible(false);
    }//GEN-LAST:event_btnLastInfoMouseExited

    private void btnLastInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastInfoActionPerformed
        // TODO add your handling code here:
//        if (frmLastInfo.isVisible() == false) {
//            frmLastInfo.setVisible(true);
//        } else {
//            frmLastInfo.requestFocus();
//        }
        lbStatus2.setText("Please wait...");
        try {
            // TODO add your handling code here:
            File f = new File("src/Prefer/JGQI_Config.properties");
            FileReader in = new FileReader(f);
            Properties prop = new Properties();
            prop.load(in);
            
            // Writes configuration data into data type
            String getInfo = prop.getProperty("info");
            String waveSt = prop.getProperty("warn");
            boolean waveStatus = Boolean.parseBoolean(waveSt);
            String wave_mag = prop.getProperty("warn_mag");
            double waveMag = Double.parseDouble(wave_mag);
            String wavePath = prop.getProperty("warn_path");
            
            System.out.println(getInfo + " || " + waveStatus + " || " + waveMag + " || " + wavePath);
            // Verification while reading XML data
            if (getInfo.equals("BMKG")) {
                boolean takeXML = TakeXML.DapatkanXMLPaksa_BMKG(wavePath, waveMag);
                if (takeXML == true) {
                    // When the data is new
                    lbStatus2.setText("BMKG: Recent Data Received!");
                    Thread.sleep(180);
                    lbStatus2.setText(null);
                } else {
                    // When the data is not found or old data is given
                    lbStatus2.setText(null);
                    JOptionPane.showMessageDialog(this, "Gagal mendapatkan informasi terakhir dari BMKG!", "Not Found", JOptionPane.WARNING_MESSAGE);
                }
            } else if (getInfo.equals("USGS")) {
                boolean takeXML = TakeXML.DapatkanXML_USGS(wavePath, waveMag);
                if (takeXML == true) {
                    // When the data is new
                    lbStatus2.setText("USGS: New Data Received!");
                    Thread.sleep(180);
                    lbStatus2.setText(null);
                } else {
                    // When the data is not found or old data is given
                    frmBar.dispose();
                    lbStatus2.setText(null);
                    int t = JOptionPane.showConfirmDialog(this, "Informasi Gempa Terbaru dari USGS tidak ditemukan. Apakah Anda ingin melihat informasi yang terakhir didapat?", "Not Found", JOptionPane.YES_NO_OPTION);
                    if (t == JOptionPane.YES_OPTION) {
                        if (frmLastInfo.isVisible() == false) {
                            frmLastInfo.setVisible(true);
                        } else {
                            frmLastInfo.requestFocus();
                        }
                    }
                }
            } /*else {
                JOptionPane.showMessageDialog(this, "Ada masalah pada data preferensi Anda. Cek kembali preferensinya, atau kembalikan semuanya ke default!", "Oops! Null Configuration", JOptionPane.ERROR_MESSAGE);
            }*/
            in.close();
        } catch (Exception ex) {
                    String errTit = ex.getMessage();
                    JOptionPane.showMessageDialog(this, ex.getStackTrace(), errTit, JOptionPane.ERROR_MESSAGE);
                    CharArrayWriter cw = new CharArrayWriter();
                    PrintWriter w = new PrintWriter(cw);
                    ex.printStackTrace(w);
                    w.close();
                    String trace = cw.toString();
                    
                    frmDebug.setVisible(true);
                    frmDebug.log.setText(trace + "\n" + String.valueOf(System.getProperties()));
                    Logger.getLogger(frmConfig.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnLastInfoActionPerformed

    private void btnContactMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnContactMouseEntered
        // TODO add your handling code here:
        ImageIcon i = new ImageIcon(getClass().getResource("/Resources/Phone_84px.png"));
        btnContact.setIcon(i);
        lbContact.setVisible(true);
    }//GEN-LAST:event_btnContactMouseEntered

    private void btnContactMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnContactMouseExited
        // TODO add your handling code here:
        ImageIcon i = new ImageIcon(getClass().getResource("/Resources/Phone_Gray_84.png"));
        btnContact.setIcon(i);
        lbContact.setVisible(false);
    }//GEN-LAST:event_btnContactMouseExited

    private void btnContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnContactActionPerformed
        String sys = System.getProperty("os.name");
        if (sys.startsWith("Windows")) {
            try {
                // TODO add your handling code here:
                Process p = Runtime.getRuntime().exec("explorer http://m.me/CdrScNET89");
            } catch (IOException ex) {
                    String errTit = ex.getMessage();
                    JOptionPane.showMessageDialog(this, ex.getStackTrace(), errTit, JOptionPane.ERROR_MESSAGE);
                    CharArrayWriter cw = new CharArrayWriter();
                    PrintWriter w = new PrintWriter(cw);
                    ex.printStackTrace(w);
                    w.close();
                    String trace = cw.toString();
                    
                    frmDebug.setVisible(true);
                    frmDebug.log.setText(trace + "\n" + String.valueOf(System.getProperties()));
                    Logger.getLogger(frmConfig.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                // TODO add your handling code here:
                Process p = Runtime.getRuntime().exec("xdg-open http://m.me/CdrScNET89");
            } catch (IOException ex) {
                    String errTit = ex.getMessage();
                    JOptionPane.showMessageDialog(this, ex.getStackTrace(), errTit, JOptionPane.ERROR_MESSAGE);
                    CharArrayWriter cw = new CharArrayWriter();
                    PrintWriter w = new PrintWriter(cw);
                    ex.printStackTrace(w);
                    w.close();
                    String trace = cw.toString();
                    
                    frmDebug.setVisible(true);
                    frmDebug.log.setText(trace + "\n" + String.valueOf(System.getProperties()));
                    Logger.getLogger(frmConfig.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnContactActionPerformed

    private void btnTentangMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTentangMouseEntered
        // TODO add your handling code here:
        ImageIcon i = new ImageIcon(getClass().getResource("/Resources/About_84px.png"));
        btnTentang.setIcon(i);
        lbTentang.setVisible(true);
    }//GEN-LAST:event_btnTentangMouseEntered

    private void btnTentangMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTentangMouseExited
        // TODO add your handling code here:
        ImageIcon i = new ImageIcon(getClass().getResource("/Resources/About_Gray_84.png"));
        btnTentang.setIcon(i);
        lbTentang.setVisible(false);
    }//GEN-LAST:event_btnTentangMouseExited

    private void btnTentangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTentangActionPerformed
        // TODO add your handling code here:
        if (frmAbout.isVisible() == false) {
            frmAbout.setVisible(true);
        } else {
            frmAbout.requestFocus();
        }
    }//GEN-LAST:event_btnTentangActionPerformed

    private void seeinfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seeinfoActionPerformed
        // TODO add your handling code here:
        lbStatus2.setText("Please wait...");
        try {
            // TODO add your handling code here:
            File f = new File("src/Prefer/JGQI_Config.properties");
            FileReader in = new FileReader(f);
            Properties prop = new Properties();
            prop.load(in);
            
            // Writes configuration data into data type
            String getInfo = prop.getProperty("info");
            String waveSt = prop.getProperty("warn");
            boolean waveStatus = Boolean.parseBoolean(waveSt);
            String wave_mag = prop.getProperty("warn_mag");
            double waveMag = Double.parseDouble(wave_mag);
            String wavePath = prop.getProperty("warn_path");
            
            System.out.println(getInfo + " || " + waveStatus + " || " + waveMag + " || " + wavePath);
            // Verification while reading XML data
            if (getInfo.equals("BMKG")) {
                boolean takeXML = TakeXML.DapatkanXMLPaksa_BMKG(wavePath, waveMag);
                if (takeXML == true) {
                    // When the data is new
                } else {
                    // When the data is not found or old data is given
                    JOptionPane.showMessageDialog(this, "Gagal mendapatkan informasi terakhir dari BMKG!", "Not Found", JOptionPane.WARNING_MESSAGE);
                }
            } else if (getInfo.equals("USGS")) {
                boolean takeXML = TakeXML.DapatkanXML_USGS(wavePath, waveMag);
                if (takeXML == true) {
                    // When the data is new
                } else {
                    // When the data is not found or old data is given
                    frmBar.dispose();
                    int t = JOptionPane.showConfirmDialog(this, "Informasi Gempa Terbaru dari USGS tidak ditemukan. Apakah Anda ingin melihat informasi yang terakhir didapat?", "Not Found", JOptionPane.YES_NO_OPTION);
                    if (t == JOptionPane.YES_OPTION) {
                        if (frmLastInfo.isVisible() == false) {
                            frmLastInfo.setVisible(true);
                        } else {
                            frmLastInfo.requestFocus();
                        }
                    }
                }
            } /*else {
                JOptionPane.showMessageDialog(this, "Ada masalah pada data preferensi Anda. Cek kembali preferensinya, atau kembalikan semuanya ke default!", "Oops! Null Configuration", JOptionPane.ERROR_MESSAGE);
            }*/
            in.close();
        } catch (Exception ex) {
                    String errTit = ex.getMessage();
                    JOptionPane.showMessageDialog(this, ex.getStackTrace(), errTit, JOptionPane.ERROR_MESSAGE);
                    CharArrayWriter cw = new CharArrayWriter();
                    PrintWriter w = new PrintWriter(cw);
                    ex.printStackTrace(w);
                    w.close();
                    String trace = cw.toString();
                    
                    frmDebug.setVisible(true);
                    frmDebug.log.setText(trace + "\n" + String.valueOf(System.getProperties()));
                    Logger.getLogger(frmConfig.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_seeinfoActionPerformed

    private void prfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prfActionPerformed
        // TODO add your handling code here:
        if (frmConfig.isVisible() == false) {
            frmConfig.setVisible(true);
        } else {
            frmConfig.requestFocus();
        }
    }//GEN-LAST:event_prfActionPerformed

    private void kelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kelActionPerformed
        // TODO add your handling code here:
        int t = JOptionPane.showConfirmDialog(this, "Yakin ingin keluar dari aplikasi?", "Sure?", JOptionPane.YES_NO_OPTION);
        if (t == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_kelActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if (sysTray.TrayStatus != false) {
            this.dispose();
        } else { 
            int t = JOptionPane.showConfirmDialog(this, "Yakin ingin keluar dari aplikasi?", "Sure?", JOptionPane.YES_NO_OPTION);
            if (t == JOptionPane.YES_OPTION) {
                System.exit(0);
            }
        } 
    }//GEN-LAST:event_formWindowClosing

    private void ckinfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckinfoActionPerformed
        // TODO add your handling code here:
        lbStatus2.setText("Please wait...");
        try {
            // TODO add your handling code here:
            File f = new File("src/Prefer/JGQI_Config.properties");
            FileReader in = new FileReader(f);
            Properties prop = new Properties();
            prop.load(in);
            
            // Writes configuration data into data type
            String getInfo = prop.getProperty("info");
            String waveSt = prop.getProperty("warn");
            boolean waveStatus = Boolean.parseBoolean(waveSt);
            String wave_mag = prop.getProperty("warn_mag");
            double waveMag = Double.parseDouble(wave_mag);
            String wavePath = prop.getProperty("warn_path");
            
            System.out.println(getInfo + " || " + waveStatus + " || " + waveMag + " || " + wavePath);
            // Verification while reading XML data
            if (getInfo.equals("BMKG")) {
                boolean takeXML = TakeXML.DapatkanXML_BMKG(wavePath, waveMag);
                if (takeXML == true) {
                    // When the data is new
                    lbStatus2.setText("BMKG: New Data Received!");
                    Thread.sleep(180);
                    lbStatus2.setText(null);
                } else {
                    // When the data is not found or old data is given
                    frmBar.dispose();
                    lbStatus2.setText(null);
                    int t = JOptionPane.showConfirmDialog(this, "Informasi Gempa Terbaru dari BMKG tidak ditemukan. Apakah Anda ingin melihat informasi yang terakhir didapat?", "Not Found", JOptionPane.YES_NO_OPTION);
                    if (t == JOptionPane.YES_OPTION) {
                        takeXML = TakeXML.DapatkanXMLPaksa_BMKG(wavePath, waveMag);
                        if (takeXML == true) {
                            // When the data is new
                            lbStatus2.setText("BMKG: Recent Data Received!");
                            Thread.sleep(180);
                            lbStatus2.setText(null);
                        } else {
                            // When the data is not found or old data is given
                            lbStatus2.setText(null);
                            JOptionPane.showMessageDialog(this, "Gagal mendapatkan informasi terakhir dari BMKG!", "Not Found", JOptionPane.WARNING_MESSAGE);
                        }
                    }
                }
            } else if (getInfo.equals("USGS")) {
                boolean takeXML = TakeXML.DapatkanXML_USGS(wavePath, waveMag);
                if (takeXML == true) {
                    // When the data is new
                    lbStatus2.setText("USGS: New Data Received!");
                    Thread.sleep(180);
                    lbStatus2.setText(null);
                } else {
                    // When the data is not found or old data is given
                    frmBar.dispose();
                    lbStatus2.setText(null);
                    int t = JOptionPane.showConfirmDialog(this, "Informasi Gempa Terbaru dari USGS tidak ditemukan. Apakah Anda ingin melihat informasi yang terakhir didapat?", "Not Found", JOptionPane.YES_NO_OPTION);
                    if (t == JOptionPane.YES_OPTION) {
                        if (frmLastInfo.isVisible() == false) {
                            frmLastInfo.setVisible(true);
                        } else {
                            frmLastInfo.requestFocus();
                        }
                    }
                }
            } /*else {
                JOptionPane.showMessageDialog(this, "Ada masalah pada data preferensi Anda. Cek kembali preferensinya, atau kembalikan semuanya ke default!", "Oops! Null Configuration", JOptionPane.ERROR_MESSAGE);
            }*/
            in.close();
        } catch (Exception ex) {
                    String errTit = ex.getMessage();
                    JOptionPane.showMessageDialog(this, ex.getStackTrace(), errTit, JOptionPane.ERROR_MESSAGE);
                    CharArrayWriter cw = new CharArrayWriter();
                    PrintWriter w = new PrintWriter(cw);
                    ex.printStackTrace(w);
                    w.close();
                    String trace = cw.toString();
                    
                    frmDebug.setVisible(true);
                    frmDebug.log.setText(trace + "\n" + String.valueOf(System.getProperties()));
                    Logger.getLogger(frmConfig.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ckinfoActionPerformed

    private void abActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abActionPerformed
        // TODO add your handling code here:
        if (frmAbout.isVisible() == false) {
            frmAbout.setVisible(true);
        } else {
            frmAbout.requestFocus();
        }
    }//GEN-LAST:event_abActionPerformed

    private void contActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contActionPerformed
        // TODO add your handling code here:
        String sys = System.getProperty("os.name");
        if (sys.startsWith("Windows")) {
            try {
                // TODO add your handling code here:
                Process p = Runtime.getRuntime().exec("explorer http://m.me/CdrScNET89");
            } catch (IOException ex) {
                    String errTit = ex.getMessage();
                    JOptionPane.showMessageDialog(this, ex.getStackTrace(), errTit, JOptionPane.ERROR_MESSAGE);
                    CharArrayWriter cw = new CharArrayWriter();
                    PrintWriter w = new PrintWriter(cw);
                    ex.printStackTrace(w);
                    w.close();
                    String trace = cw.toString();
                    
                    frmDebug.setVisible(true);
                    frmDebug.log.setText(trace + "\n" + String.valueOf(System.getProperties()));
                    Logger.getLogger(frmConfig.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                // TODO add your handling code here:
                Process p = Runtime.getRuntime().exec("xdg-open http://m.me/CdrScNET89");
            } catch (IOException ex) {
                    String errTit = ex.getMessage();
                    JOptionPane.showMessageDialog(this, ex.getStackTrace(), errTit, JOptionPane.ERROR_MESSAGE);
                    CharArrayWriter cw = new CharArrayWriter();
                    PrintWriter w = new PrintWriter(cw);
                    ex.printStackTrace(w);
                    w.close();
                    String trace = cw.toString();
                    
                    frmDebug.setVisible(true);
                    frmDebug.log.setText(trace + "\n" + String.valueOf(System.getProperties()));
                    Logger.getLogger(frmConfig.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_contActionPerformed

    private void PopPopupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_PopPopupMenuCanceled
        // TODO add your handling code here:
        
    }//GEN-LAST:event_PopPopupMenuCanceled

    private void PopMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PopMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_PopMouseExited

    private void PopFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PopFocusLost
        // TODO add your handling code here:
//        Pop.setVisible(false);
    }//GEN-LAST:event_PopFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JPopupMenu Pop;
    private javax.swing.JMenuItem ab;
    private javax.swing.JMenu bnt;
    private javax.swing.JButton btnContact;
    private javax.swing.JButton btnLastInfo;
    private javax.swing.JButton btnPref;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnTentang;
    private javax.swing.JMenuItem ckinfo;
    private javax.swing.JMenuItem cont;
    private javax.swing.JMenu gmp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JMenuItem jdl;
    private javax.swing.JMenuItem kel;
    private javax.swing.JLabel lbContact;
    private javax.swing.JLabel lbLastInfo;
    private javax.swing.JLabel lbPref;
    private javax.swing.JLabel lbRefresh;
    public static javax.swing.JLabel lbStatus;
    private javax.swing.JLabel lbStatus2;
    private javax.swing.JLabel lbTentang;
    private javax.swing.JMenuItem prf;
    private javax.swing.JMenuItem seeinfo;
    private javax.swing.JMenuItem ttp;
    // End of variables declaration//GEN-END:variables
}
